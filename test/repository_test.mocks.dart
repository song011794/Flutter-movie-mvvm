// Mocks generated by Mockito 5.4.2 from annotations
// in movie_mvvm/test/repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_mvvm/models/tmdb_genre_list.dart' as _i3;
import 'package:movie_mvvm/models/tmdb_movie_list.dart' as _i2;
import 'package:movie_mvvm/repository/tmdb_repository.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTMDBMovieList_0 extends _i1.SmartFake implements _i2.TMDBMovieList {
  _FakeTMDBMovieList_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTMDBGenreList_1 extends _i1.SmartFake implements _i3.TMDBGenreList {
  _FakeTMDBGenreList_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TMDBRpository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTMDBRpository extends _i1.Mock implements _i4.TMDBRpository {
  MockTMDBRpository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.TMDBMovieList> fetchNowPlaying(
    String? language,
    int? page,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchNowPlaying,
          [
            language,
            page,
          ],
        ),
        returnValue: _i5.Future<_i2.TMDBMovieList>.value(_FakeTMDBMovieList_0(
          this,
          Invocation.method(
            #fetchNowPlaying,
            [
              language,
              page,
            ],
          ),
        )),
      ) as _i5.Future<_i2.TMDBMovieList>);
  @override
  _i5.Future<_i2.TMDBMovieList> fetchPopular(
    String? language,
    int? page,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPopular,
          [
            language,
            page,
          ],
        ),
        returnValue: _i5.Future<_i2.TMDBMovieList>.value(_FakeTMDBMovieList_0(
          this,
          Invocation.method(
            #fetchPopular,
            [
              language,
              page,
            ],
          ),
        )),
      ) as _i5.Future<_i2.TMDBMovieList>);
  @override
  _i5.Future<_i2.TMDBMovieList> fetchTopRated(
    String? language,
    int? page,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchTopRated,
          [
            language,
            page,
          ],
        ),
        returnValue: _i5.Future<_i2.TMDBMovieList>.value(_FakeTMDBMovieList_0(
          this,
          Invocation.method(
            #fetchTopRated,
            [
              language,
              page,
            ],
          ),
        )),
      ) as _i5.Future<_i2.TMDBMovieList>);
  @override
  _i5.Future<_i2.TMDBMovieList> fetchUpComming(
    String? language,
    int? page,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchUpComming,
          [
            language,
            page,
          ],
        ),
        returnValue: _i5.Future<_i2.TMDBMovieList>.value(_FakeTMDBMovieList_0(
          this,
          Invocation.method(
            #fetchUpComming,
            [
              language,
              page,
            ],
          ),
        )),
      ) as _i5.Future<_i2.TMDBMovieList>);
  @override
  _i5.Future<_i3.TMDBGenreList> fetchMovieGenre(String? language) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMovieGenre,
          [language],
        ),
        returnValue: _i5.Future<_i3.TMDBGenreList>.value(_FakeTMDBGenreList_1(
          this,
          Invocation.method(
            #fetchMovieGenre,
            [language],
          ),
        )),
      ) as _i5.Future<_i3.TMDBGenreList>);
}
